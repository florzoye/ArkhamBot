from loguru import logger
import aiohttp
import json
import asyncio
import os
from pathlib import Path

from data import config
from utils.session import AsyncSession, check_ip
from utils.captcha import TwoCaptcha

from src.account.info import ArkhamInfo
from src.trade.trading_client import ArkhamTrading 
from utils.leverage import ArkhamLeverage
from utils.size_calc import PositionSizer
from utils.get_prices import ArkhamPrices

class ArkhamLogin:
    def __init__(self,
                session: aiohttp.ClientSession,
                turnstile_token: str,
                cookies_file: str = "cookies.json"):
        self.session = session
        self.token = turnstile_token
        self.cookies_file = cookies_file

    
    async def headers(self, action: str | None = None):
        if action == 'login':
            return {
                'content-type': 'application/json',
                'origin': 'https://arkm.com',
                'referer': config.PAGE_URL,
            }
        return {
            "content-type": "application/json",
            "origin": "https://arkm.com",
            "referer": "https://arkm.com/login?redirectPath=%2F"
        }
    
    async def json_data(self, action: str | None = None, code_2fa: str | None = None):
        if action == 'login':
            return {
                'email': config.LOGIN_EMAIL,
                'password': config.LOGIN_PASSWORD,
                'callbackDomain': '',
                'redirectPath': '/',
                'turnstile': self.token,  
                'invisibleTurnstile': '',
            }
        return  {
            'callbackDomain': '',
            'redirectPath': '/',
            'code': code_2fa,
        }
            
    async def get_cookies_json(self, url: str = "https://arkm.com") -> str:
        """–í–µ—Ä–Ω—É—Ç—å –∫—É–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON-—Å—Ç—Ä–æ–∫–∏"""
        cookies = self.session.cookie_jar.filter_cookies(url)
        cookies_dict = {key: cookie.value for key, cookie in cookies.items()}
        return json.dumps(cookies_dict, ensure_ascii=False, indent=2)
    
    async def save_cookies(self, url: str = "https://arkm.com"):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            cookies = self.session.cookie_jar.filter_cookies(url)
            cookies_dict = {key: cookie.value for key, cookie in cookies.items()}
            
            with open(self.cookies_file, 'w', encoding='utf-8') as f:
                json.dump(cookies_dict, f, ensure_ascii=False, indent=2)
            
            logger.success(f"–ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {self.cookies_file}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É–∫–æ–≤: {e}")
            return False
    
    async def load_cookies(self, url: str = "https://arkm.com") -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.cookies_file):
                logger.info("–§–∞–π–ª —Å –∫—É–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                cookies_dict = json.load(f)
            
            if not cookies_dict:
                logger.info("–§–∞–π–ª —Å –∫—É–∫–∞–º–∏ –ø—É—Å—Ç")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—É–∫–∏ –≤ —Å–µ—Å—Å–∏—é
            for name, value in cookies_dict.items():
                self.session.cookie_jar.update_cookies({name: value}, response_url=url)
            
            logger.success(f"–ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {self.cookies_file}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É–∫–æ–≤: {e}")
            return False
    
    async def clear_cookies_file(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª —Å –∫—É–∫–∞–º–∏"""
        try:
            if os.path.exists(self.cookies_file):
                os.remove(self.cookies_file)
                logger.info(f"–§–∞–π–ª —Å –∫—É–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω: {self.cookies_file}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –∫—É–∫–∞–º–∏: {e}")
            return False
    
    async def check_cookies_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—É–∫–æ–≤"""
        try:
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            async with self.session.get("https://arkm.com/api/user/profile", 
                                      headers=await self.headers()) as resp:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–∫–æ–≤: {resp.status}")
                
                if resp.status == 200:
                    logger.success("‚úÖ –ö—É–∫–∏ –≤–∞–ª–∏–¥–Ω—ã, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
                    return True
                elif resp.status == 401:
                    logger.warning("‚ùå –ö—É–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∏")
                    return False
                else:
                    logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É–∫–æ–≤: {resp.status}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É–∫–æ–≤: {e}")
            return False
    
    async def login_with_cookies(self) -> bool:
        """–í—Ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É–∫–∏"""
        logger.info("üç™ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É–∫–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        if not await self.load_cookies():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if await self.check_cookies_valid():
            logger.success("üéâ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—É–∫–æ–≤!")
            return True
        else:
            logger.warning("–ö—É–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, –æ—á–∏—â–∞–µ–º —Ñ–∞–π–ª")
            await self.clear_cookies_file()
            return False
    
    async def login_arkham(self, save_cookies: bool = True):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"""
        logger.info("üîê –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—Ö–æ–¥...")
        
        async with self.session.get(config.PAGE_URL) as resp:
            logger.info(f"–ó–∞–≥—Ä—É–∑–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞: {resp.status}")

        async with self.session.post('https://arkm.com/api/auth/login', 
                          headers=await self.headers(action='login'), 
                          json=await self.json_data(action='login')) as resp:
            response_text = await resp.text()
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status}")
            logger.info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text}")
            
            if resp.status == 200:
                try:
                    result = json.loads(response_text)
                    if 'message' in result:
                        if result['message'] == 'no turnstile':
                            logger.error("–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∏–Ω—è–ª —Ç–æ–∫–µ–Ω Turnstile")
                            return False
                        elif 'error' in result['message'].lower():
                            logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {result['message']}")
                            return False
                    
                    logger.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                    if save_cookies:
                        await self.save_cookies()
                    
                    return True
                    
                except json.JSONDecodeError:
                    logger.info("–û—Ç–≤–µ—Ç –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                    if save_cookies:
                        await self.save_cookies()
                        
                    return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ HTTP: {resp.status}")
                return False
    
    async def verify_2FA(self, code_2fa: str, save_cookies: bool = True) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 2FA"""
        while True:
            async with self.session.post(
                'https://arkm.com/api/auth/login/challenge',
                headers=await self.headers(),
                json=await self.json_data(code_2fa=code_2fa)
            ) as resp:
                logger.info(f"–°—Ç–∞—Ç—É—Å 2FA: {resp.status} ")

                if resp.status == 200:
                    logger.success("‚úÖ 2FA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –≤—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ 2FA
                    if save_cookies:
                        await self.save_cookies()
                    
                    return True
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA")
                    return False
    
    async def full_login_process(self) -> bool:
        """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—É–∫–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –∫—É–∫–∏
        if await self.login_with_cookies():
            return True
        
        # –ï—Å–ª–∏ –∫—É–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –≤—Ö–æ–¥
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        
        if not await self.login_arkham():
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –≤—Ö–æ–¥–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ 2FA (–µ—Å–ª–∏ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ 2FA)
        if await self.check_cookies_valid():
            logger.success("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            # –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ 2FA
            logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 2FA")
            code_2fa = input_2fa()
            
            if await self.verify_2FA(code_2fa):
                logger.success("üéâ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ 2FA")
                return False

def input_2fa():
    msg = " üîë –í–≤–µ–¥–∏—Ç–µ 2FA –∫–æ–¥: "
    border = "=" * 33  # —à–∏—Ä–∏–Ω–∞ —Ä–∞–º–∫–∏
    print("\n" + border)
    print("|" + msg.ljust(len(border) - 2) + "|")
    print(border)
    code = input("> ").strip()
    return code







# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ:
async def main():
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    async with AsyncSession() as session:
        solver = TwoCaptcha(session)
        token = await solver.solve_turnstile()

        arkham_login = ArkhamLogin(session, turnstile_token=token)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if await arkham_login.full_login_process():
            logger.success("–ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –ó–¥–µ—Å—å –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —Ä–∞–±–æ—Ç—ã —Å API
            
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        
        await session.close()

if __name__ == "__main__":
    asyncio.run(main())