import os
import sys
import json
import signal
import asyncio
from typing import Optional

from colorama import init
from rich.table import Table
from rich.panel import Panel
from InquirerPy import inquirer
from rich.console import Console

from db.tradeDB import TradeSQL
from utils.captcha import TwoCaptcha
from utils.session import session_manager 
from db.manager import AsyncDatabaseManager
from utils.cookies import save_cookies_to_account

from src.account.info import ArkhamInfo
from src.account.login import ArkhamLogin
from src.trade.trading_client import ArkhamTrading


from account import Account
from data import config

init(autoreset=True)
console = Console()

current_account: Optional[Account] = None
shutdown_event = asyncio.Event()
db: Optional[AsyncDatabaseManager] = None
_shutdown_in_progress = False



def _normalize_proxy(raw: str) -> Optional[str]:
    raw = (raw or '').strip()
    if not raw:
        return None

    if '@' in raw:
        return raw

    parts = raw.split()
    if len(parts) == 2 and parts[0].startswith('http'):
        return f"{parts[0]}@{parts[1]}"

    if len(parts) == 2:
        return f"http://{parts[0]}@{parts[1]}"
    return raw 

async def graceful_shutdown():
    global _shutdown_in_progress, db, current_account
    
    if _shutdown_in_progress:
        return
    
    _shutdown_in_progress = True
    
    console.print("\n[yellow]üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã...[/yellow]")
    shutdown_event.set()

    try:
        if current_account:
            try:
                await current_account.close_session()
                console.print("[green]‚úÖ –°–µ—Å—Å–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞[/green]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {e}[/yellow]")

        try:
            await session_manager.close_all()
        except Exception as e:
            console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–π: {e}[/yellow]")

        if db:
            try:
                await db.close()
                console.print("[green]‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞[/green]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}[/yellow]")

        current_task = asyncio.current_task()
        tasks = [
            task for task in asyncio.all_tasks()
            if task != current_task and not task.done()
        ]

        if tasks:
            console.print(f"[yellow]üîÑ –û—Ç–º–µ–Ω—è–µ–º {len(tasks)} –∑–∞–¥–∞—á...[/yellow]")
            for task in tasks:
                task.cancel()

            try:
                await asyncio.wait_for(
                    asyncio.gather(*tasks, return_exceptions=True),
                    timeout=3.0
                )
            except asyncio.TimeoutError:
                console.print("[yellow]‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ø–æ —Ç–∞–π–º–∞—É—Ç—É[/yellow]")

        console.print("[green]‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}[/red]")
    
    finally:
        try:
            loop = asyncio.get_running_loop()
            if loop.is_running():
                loop.stop()
        except:
            pass


def setup_interrupt_handler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
    def signal_handler(sig, frame):
        console.print(f"\n[yellow]‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...[/yellow]")
        
        if _shutdown_in_progress:
            console.print("[red]‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...[/red]")
            os._exit(1)

        try:
            loop = asyncio.get_running_loop()
            if loop.is_running():
                loop.create_task(graceful_shutdown())
            else:
                os._exit(0)
        except RuntimeError:
            os._exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)   
    signal.signal(signal.SIGTERM, signal_handler)  
    
    if hasattr(signal, 'SIGBREAK'):  
        signal.signal(signal.SIGBREAK, signal_handler)


async def start_menu() -> Optional[Account]:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    while not shutdown_event.is_set():
        try:
            console.print(config.banner, justify="center")
            console.print("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", justify="center")
                
            choice = await inquirer.select(
                message='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                choices=[
                    "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä—É—á–Ω—É—é",
                    "üëÜ –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î",
                    "‚ùå –í—ã—Ö–æ–¥"
                ],
                default="üëÜ –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î",
            ).execute_async()

            match choice:
                case "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä—É—á–Ω—É—é":
                    acc = await add_account()
                    if acc:
                        return acc
                case "üëÜ –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î":
                    acc = await select_account()
                    if acc:
                        return acc
                case "‚ùå –í—ã—Ö–æ–¥":
                    return None
                    
        except KeyboardInterrupt:
            return None
        except Exception as e:
            if shutdown_event.is_set():
                return None
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º –º–µ–Ω—é: {e}[/red]")
            await asyncio.sleep(1)

    return None


async def main_menu(account: Account):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    global current_account
    current_account = account
    
    while not shutdown_event.is_set():
        try:
            console.print(
                f"\n[bold blue]üöÄ ARKHAM TRADING SYSTEM[/bold blue] ‚Äî [green]{account.account}[/green]",
                justify="center"
            )

            choice = await inquirer.select(
                message="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                choices=[
                    "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    "üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–∫–∫–∞—É–Ω—Ç—ã", 
                    "üíπ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                    "‚ùå –í—ã—Ö–æ–¥",
                ],
                default="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            ).execute_async()

            match choice:
                case "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö":
                    await database_menu(account)
                case "üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–∫–∫–∞—É–Ω—Ç—ã":
                    await auth_menu(account)
                case "üíπ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏":
                    await trading_menu(account)
                case "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
                    await analytics_menu(account)
                case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è":
                    await settings_menu(account)
                case "‚ùå –í—ã—Ö–æ–¥":
                    return
                    
        except KeyboardInterrupt:
            return
        except Exception as e:
            if shutdown_event.is_set():
                break
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}[/red]")
            await asyncio.sleep(1)


async def database_menu(account: Account):
    console.print("[yellow]üìÇ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)[/yellow]")
    await asyncio.sleep(1)

async def auth_menu(account: Account):
    console.print("[yellow]üîê –ú–µ–Ω—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)[/yellow]")
    await asyncio.sleep(1)

async def trading_menu(account: Account):
    console.print("[yellow]üíπ –ú–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)[/yellow]")
    await asyncio.sleep(1)

async def analytics_menu(account: Account):
    """–ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        
    try:
        console.print("[blue]üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...[/blue]")
        
        if not account.arkham_info:
            await account.initialize_clients()
        
        balance = await account.arkham_info.get_balance()
        points = await account.arkham_info.get_volume_or_points('points')
        volume = await account.arkham_info.get_volume_or_points('volume')
        
        if shutdown_event.is_set():
            return
        
        table = Table(title=f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {account.account}")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        table.add_row("üí∞ –ë–∞–ª–∞–Ω—Å", str(balance))
        table.add_row("üèÜ –û—á–∫–∏", str(points))
        table.add_row("üìà –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤", str(volume))
        
        console.print(table)
        
        if not shutdown_event.is_set():
            await inquirer.text(message="–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...").execute_async()
        
    except Exception as e:
        if not shutdown_event.is_set():
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}[/red]")
            await asyncio.sleep(2)

async def settings_menu(account: Account):
    if shutdown_event.is_set():
        return
    console.print("[yellow]‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)[/yellow]")
    await asyncio.sleep(1)


async def select_account() -> Optional[Account]:
    """–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        trade_table = TradeSQL(db)
        accounts = await trade_table.get_all(config.TABLE_NAME)

        if not accounts:
            console.print("[red]‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö[/red]")
            return None

        account_names = [acc.get('account', 'Unknown') for acc in accounts]
        selected_name = await inquirer.select(
            message="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:",
            choices=account_names + ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ).execute_async()
        
        if selected_name == "‚ùå –û—Ç–º–µ–Ω–∞" or shutdown_event.is_set():
            return None

        acc_data = await trade_table.get_account(config.TABLE_NAME, selected_name)
        account = db_row_to_account(acc_data)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        await account.create_session()
        
        return account

    except Exception as e:
        if not shutdown_event.is_set():
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}[/red]")
        return None


async def add_account() -> Optional[Account]:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        account_name = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:").execute_async()
        email = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ email:").execute_async()
        password = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:").execute_async()
        raw_proxy = await inquirer.text(
            message="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: http://user:pass ip:port –∏–ª–∏ http://user:pass@ip:port):"
        ).execute_async()
        proxy = _normalize_proxy(str(raw_proxy))
        api_key = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ Arkham api_key:").execute_async()
        api_secret = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ Arkham api_secret:").execute_async()
        captcha_key = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ TwoCaptcha captcha_key:").execute_async()
        
        account = Account(
            account=account_name,
            email=email,
            password=password,
            proxy=proxy or None,
            api_key=api_key,
            api_secret=api_secret,
            captcha_key=captcha_key
        )

        await account.create_session()
        
        if shutdown_event.is_set():
            await account.close_session()
            return None

        status = await account.session_check(db)
        if not status and not shutdown_event.is_set():
            choice = await inquirer.select(
                message="–ü—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏?",
                choices=["‚òëÔ∏è –î–∞", "‚ùå –í—ã—Ö–æ–¥"],
                default="‚òëÔ∏è –î–∞",
            ).execute_async()

            if shutdown_event.is_set():
                await account.close_session()
                return None

            match choice:
                case "‚òëÔ∏è –î–∞":
                    account = await login_arkham(account)
                    if not account or shutdown_event.is_set():
                        console.print("[red]‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å[/red]")
                        return None 
                case "‚ùå –í—ã—Ö–æ–¥":
                    await account.close_session()
                    return None
        
        if shutdown_event.is_set():
            await account.close_session()
            return None
                
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        await account.initialize_clients()
        
        if shutdown_event.is_set():
            await account.close_session()
            return None
        
        balance = await account.arkham_info.get_balance()
        points = await account.arkham_info.get_volume_or_points('points')
        volume = await account.arkham_info.get_volume_or_points('volume')
        margin_fee = list(await account.arkham_info.get_fee_margin())[1]
        margin_bonus = list(await account.arkham_info.get_fee_margin())[0]

        if shutdown_event.is_set():
            await account.close_session()
            return None
        
        await save_account_to_db(account, balance, points, volume, margin_fee, margin_bonus)
        
        return account
        
    except Exception as e:
        if not shutdown_event.is_set():
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}[/red]")
        return None


async def save_account_to_db(account: Account, balance, points, volume, margin_fee, margin_bonus):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if shutdown_event.is_set():
        return
        
    try:
        trade_table = TradeSQL(db)
        account_data = account.model_dump(
            exclude={"arkham_info", "arkham_login", "price_client", "arkham_trader", "session", "_session_manager"}
        )
        
        if account_data.get('cookies'):
            if isinstance(account_data['cookies'], (dict, list, tuple)):
                account_data['cookies'] = json.dumps(account_data['cookies'])
            elif not isinstance(account_data['cookies'], str):
                account_data['cookies'] = str(account_data['cookies'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        account_data.update({
            "balance": balance,
            "points": points,
            "volume": volume,
            "margin_fee": margin_fee,
            "margin_bonus": margin_bonus,
        })
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        for key, value in account_data.items():
            if isinstance(value, (tuple, list)) and key != 'cookies':
                account_data[key] = json.dumps(value)
            elif value is None:
                account_data[key] = None
            elif not isinstance(value, (str, int, float, bytes)):
                account_data[key] = str(value)
        
        await trade_table.add_info(config.TABLE_NAME, account_data)
        console.print(f"[green]‚úÖ –ê–∫–∫–∞—É–Ω—Ç '{account.account}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É[/green]")
        
    except Exception as e:
        if not shutdown_event.is_set():
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ë–î: {e}[/red]")


def db_row_to_account(row: dict) -> Account:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ –ë–î –≤ –æ–±—ä–µ–∫—Ç Account"""
    cookies = row.get("cookies")
    if cookies and isinstance(cookies, str):
        try:
            cookies = json.loads(cookies)
        except (json.JSONDecodeError, TypeError):
            pass
    
    return Account(
        account=row.get("account"),
        email=row.get("email"),
        password=row.get("password"),
        api_key=row.get("api_key"),
        api_secret=row.get("api_secret"),
        proxy=row.get("proxy"),
        cookies=cookies,
        captcha_key=row.get("captcha_key")
    )


async def login_arkham(account: Account) -> Optional[Account]:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Arkham"""
    try:
        session = await account.ensure_session()

        captcha = TwoCaptcha(session, account.captcha_key)
        token = await captcha.solve_turnstile()

        arkham_login = ArkhamLogin(
            session=session,
            password=account.password,
            email=account.email,
            turnstile_token=token,
        )

        status = await arkham_login.login_arkham()
        if not status or shutdown_event.is_set():
            console.print("[red]‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Arkham[/red]")
            return None

        code_2fa = await arkham_login.input_2fa()
        if shutdown_event.is_set():
            return None
            
        ok = await arkham_login.verify_2FA(code_2fa)
        if not ok or shutdown_event.is_set():
            console.print("[red]‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA[/red]")
            return None

        updated_account = await save_cookies_to_account(session, account)
        console.print("[green]‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω, –∫—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Account[/green]")

        return updated_account

    except Exception as e:
        if not shutdown_event.is_set():
            import traceback
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ login: {repr(e)}[/red]")
            console.print(traceback.format_exc())
        return None


async def create_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        trade_table = TradeSQL(db)
        await trade_table.create_table(config.TABLE_NAME)
        console.print("[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞[/green]")
    except Exception as e:
        if not shutdown_event.is_set():
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}[/red]")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global db # –¥–∞, —ç—Ç–æ –ø–∏–∑–¥–µ—Ü
    try:
        setup_interrupt_handler()
        
        console.print(Panel.fit(
            "[bold blue]üöÄ ARKHAM TRADING SYSTEM[/bold blue]\n"
            "[yellow]–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è[/yellow]",
            title="–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
        ))

        db = AsyncDatabaseManager(config.DB_NAME)

        await create_table()
        
        if shutdown_event.is_set():
            return

        # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        account = await start_menu()
        if not account or shutdown_event.is_set():
            console.print("[yellow]‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞[/yellow]")
            return

        console.print(f"[green]‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: {account.account}[/green]")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await main_menu(account)

    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if not _shutdown_in_progress:
            await graceful_shutdown()


if __name__ == "__main__":
    try:
        if hasattr(asyncio, 'WindowsProactorEventLoopPolicy') and os.name == 'nt':
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            loop.run_until_complete(main())
        finally:
            pending = asyncio.all_tasks(loop)
            if pending:
                for task in pending:
                    task.cancel()
                
                try:
                    loop.run_until_complete(
                        asyncio.wait_for(
                            asyncio.gather(*pending, return_exceptions=True),
                            timeout=2.0
                        )
                    )
                except asyncio.TimeoutError:
                    pass
            
            loop.close()
            
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)