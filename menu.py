import os
import sys
import json
import signal
import asyncio
from typing import Optional

from colorama import init
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from InquirerPy import inquirer

from db.tradeDB import TradeSQL
from db.manager import AsyncDatabaseManager

from utils.session import session_manager
from utils.cookies import (
    save_cookies_to_account,
    check_cookies_from_account,
    apply_cookies_from_db
)
from utils.captcha import TwoCaptcha
from src.account.login import ArkhamLogin
from src.trade.trading_client import ArkhamTrading
from utils.leverage import ArkhamLeverage
from utils.size_calc import PositionSizer

from account import Account
from data import config


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
init(autoreset=True)
console = Console()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
current_account: Optional[Account] = None
shutdown_event = asyncio.Event()
db: Optional[AsyncDatabaseManager] = None
_shutdown_in_progress = False


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def _normalize_proxy(raw: str) -> Optional[str]:
    raw = (raw or '').strip()
    if not raw:
        return None

    if '@' in raw:
        return raw

    parts = raw.split()
    if len(parts) == 2 and parts[0].startswith('http'):
        return f"{parts[0]}@{parts[1]}"

    if len(parts) == 2:
        return f"http://{parts[0]}@{parts[1]}"

    return raw


def db_row_to_account(row: dict) -> Account:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ –ë–î –≤ –æ–±—ä–µ–∫—Ç Account"""
    cookies = row.get("cookies")
    if cookies and isinstance(cookies, str):
        try:
            cookies = json.loads(cookies)
        except (json.JSONDecodeError, TypeError):
            pass

    return Account(
        account=row.get("account"),
        email=row.get("email"),
        password=row.get("password"),
        api_key=row.get("api_key"),
        api_secret=row.get("api_secret"),
        proxy=row.get("proxy"),
        cookies=cookies,
        captcha_key=row.get("captcha_key")
    )


# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def graceful_shutdown():
    global _shutdown_in_progress, db, current_account

    if _shutdown_in_progress:
        return
    _shutdown_in_progress = True

    console.print("\n[yellow]üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã...[/yellow]")
    shutdown_event.set()

    try:
        if current_account:
            try:
                await current_account.close_session()
                console.print("[green]‚úÖ –°–µ—Å—Å–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞[/green]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {e}[/yellow]")

        try:
            await session_manager.close_all()
        except Exception as e:
            console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–π: {e}[/yellow]")

        if db:
            try:
                await db.close()
                console.print("[green]‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞[/green]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}[/yellow]")

        current_task = asyncio.current_task()
        tasks = [
            task for task in asyncio.all_tasks()
            if task != current_task and not task.done()
        ]

        if tasks:
            console.print(f"[yellow]üîÑ –û—Ç–º–µ–Ω—è–µ–º {len(tasks)} –∑–∞–¥–∞—á...[/yellow]")
            for task in tasks:
                task.cancel()

            try:
                await asyncio.wait_for(
                    asyncio.gather(*tasks, return_exceptions=True),
                    timeout=3.0
                )
            except asyncio.TimeoutError:
                console.print("[yellow]‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ø–æ —Ç–∞–π–º–∞—É—Ç—É[/yellow]")

        console.print("[green]‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")

    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}[/red]")

    finally:
        try:
            loop = asyncio.get_running_loop()
            if loop.is_running():
                loop.stop()
        except:
            pass


def setup_interrupt_handler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
    def signal_handler(sig, frame):
        console.print(f"\n[yellow]‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...[/yellow]")

        if _shutdown_in_progress:
            console.print("[red]‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...[/red]")
            os._exit(1)

        try:
            loop = asyncio.get_running_loop()
            if loop.is_running():
                loop.create_task(graceful_shutdown())
            else:
                os._exit(0)
        except RuntimeError:
            os._exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    if hasattr(signal, 'SIGBREAK'):
        signal.signal(signal.SIGBREAK, signal_handler)


# --- –ú–µ–Ω—é ---
async def start_menu() -> Optional[Account]:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    while not shutdown_event.is_set():
        try:
            console.print(config.banner, justify="center")
            console.print("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", justify="center")

            choice = await inquirer.select(
                message='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                choices=[
                    "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä—É—á–Ω—É—é",
                    "üëÜ –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î",
                    "‚ùå –í—ã—Ö–æ–¥"
                ],
                default="üëÜ –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î",
            ).execute_async()

            match choice:
                case "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä—É—á–Ω—É—é":
                    acc = await add_account()
                    if acc:
                        return acc
                case "üëÜ –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î":
                    acc = await select_account()
                    if acc:
                        return acc
                case "‚ùå –í—ã—Ö–æ–¥":
                    return None

        except KeyboardInterrupt:
            return None
        except Exception as e:
            if shutdown_event.is_set():
                return None
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º –º–µ–Ω—é: {e}[/red]")
            await asyncio.sleep(1)

    return None

async def main_menu(account: Account):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    global current_account
    current_account = account

    while not shutdown_event.is_set():
        try:
            console.print(
                f"\n[bold blue]üöÄ ARKHAM TRADING SYSTEM[/bold blue] ‚Äî [green]{current_account.account}[/green]",
                justify="center"
            )

            choice = await inquirer.select(
                message="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                choices=[
                    "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    "üíπ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ",
                    "‚ùå –í—ã—Ö–æ–¥",
                ],
                default="üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
            ).execute_async()

            match choice:
                case "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö":
                    result = await database_menu(current_account)
                    
                    if result is None:
                        console.print("[yellow]‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã...[/yellow]")
                        return
                    elif isinstance(result, Account) and result.account != current_account.account:
                        await current_account.close_session()  
                        current_account = result
                        console.print(f"[green]‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {current_account.account}[/green]")
                        
                case "üíπ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏":
                    await trading_menu(current_account)
                case "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ":
                    await show_basic_account_info(current_account)

                case "‚ùå –í—ã—Ö–æ–¥":
                    return

        except KeyboardInterrupt:
            return
        except Exception as e:
            if shutdown_event.is_set():
                break
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}[/red]")
            await asyncio.sleep(1)

# --- –ü–æ–¥–º–µ–Ω—é ---
async def database_menu(account: Account):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    while not shutdown_event.is_set():
        try:
            console.print("[yellow]üìÇ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö[/yellow]", justify='center')

            choice = await inquirer.select(
                message="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                choices=[
                    "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É",
                    "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç", 
                    "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                ],
                default="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
            ).execute_async()

            match choice:
                case "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É":
                    await clear_table_action()
                    
                case "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç":
                    console.print("[yellow]‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ï—Å–ª–∏ —É –≤–∞—Å –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç, —Ç–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è![/yellow]")
                    result = await delete_account_action(account)
                    if result == "account_deleted":
                        console.print("[yellow]‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç.[/yellow]")
                        new_account = await select_account()
                        if new_account:
                            console.print(f"[green]‚úÖ –í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: {new_account.account}[/green]")
                            return new_account 
                        else:
                            console.print("[red]‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.[/red]")
                            return None
                    elif result == "other_deleted":
                        continue
                    elif result == "cancelled":
                        continue
                        
                case "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã":
                    await show_all_accounts()
                    
                case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                    return account  

        except KeyboardInterrupt:
            return account
        except Exception as e:
            if not shutdown_event.is_set():
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –ë–î: {e}[/red]")
                await asyncio.sleep(1)

    return account

async def show_basic_account_info(account: Account):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    try:
        console.print("[blue]üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...[/blue]")

        if not account.arkham_info:
            await account.initialize_clients()

        balance = await account.arkham_info.get_balance()
        points = await account.arkham_info.get_volume_or_points('points')
        volume = await account.arkham_info.get_volume_or_points('volume')

        if shutdown_event.is_set():
            return

        table = Table(title=f"üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {account.account}")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan", width=25)
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green", width=20)

        table.add_row("üí∞ –ë–∞–ª–∞–Ω—Å", f"${balance:.2f}")
        table.add_row("üèÜ –û—á–∫–∏", str(points))
        table.add_row("üìà –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤", f"${volume:.2f}")
        table.add_row("üí∏ –ú–∞—Ä–∂–∞ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π", f"${account.margin_fee:.2f}")
        table.add_row("üéÅ –ú–∞—Ä–∂–∞ –±–æ–Ω—É—Å", f"${account.margin_bonus:.2f}")

        console.print(table)

        if not shutdown_event.is_set():
            await inquirer.text(message="–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").execute_async()

    except Exception as e:
        if not shutdown_event.is_set():
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}[/red]")
            await asyncio.sleep(2)

async def trading_menu(account: Account):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞"""
    while True:
        await account.initialize_clients()

        choice = await inquirer.select(
            message="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            choices=[
                "üìã –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏",
                "üìà –û—Ç–∫—Ä—ã—Ç—å LONG",
                "üìâ –û—Ç–∫—Ä—ã—Ç—å SHORT",
                "‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏",
                "‚¨ÖÔ∏è –í—ã–π—Ç–∏",
            ],
                default="üìã –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏"
        ).execute_async()

        match choice:
            case "üìã –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏":
                await positions_and_balances_menu(account)

            case "üìà –û—Ç–∫—Ä—ã—Ç—å LONG":
                await open_position(account, side="long")

            case "üìâ –û—Ç–∫—Ä—ã—Ç—å SHORT":
                await open_position(account, side="short")

            case "‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏":
                await close_all_positions(account)

            case "‚¨ÖÔ∏è –í—ã–π—Ç–∏":
                break


async def positions_and_balances_menu(account: Account):
    """–ú–µ–Ω—é: –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
    try:
        await account.initialize_clients()
        positions = await account.arkham_info.get_all_positions()

        if not positions:
            console.print("[yellow]‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π[/yellow]")
            await asyncio.sleep(2)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = Table(title="üìã –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏")
        table.add_column("–ú–æ–Ω–µ—Ç–∞", style="cyan")
        table.add_column("–†–∞–∑–º–µ—Ä", style="green")
        table.add_column("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", style="blue")
        table.add_column("–ú–∞—Ä–∂–∞", style="yellow")
        table.add_column("PnL", style="magenta")
        table.add_column("Entry", style="gray")


        for coin, pos in positions.items():
            size = pos.get("base", 0)
            direction = "LONG" if float(size) > 0 else "SHORT"
            table.add_row(
                coin,
                str(size),
                direction,
                str(pos.get("value", "N/A")),
                str(pos.get("pnl", "N/A")),
                str(pos.get('entry', "N/A"))
            )

        console.print(table)

        # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        choice = await inquirer.select(
            message="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
            choices=list(positions.keys()) + ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ).execute_async()

        if choice == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        position = positions[choice]
        size = abs(position["base"])
        direction = "LONG" if float(position["base"]) > 0 else "SHORT"

        trader = ArkhamTrading(
            session=account.session,
            coin=choice,
            size=size,
            info_client=account.arkham_info
        )

        console.print(f"[blue]üìä –ó–∞–∫—Ä—ã–≤–∞–µ–º {direction} –ø–æ {choice} –Ω–∞ {size}[/blue]")

        if direction == "LONG":
            success = await trader.futures_close_long_market(position_size=size)
        else:
            success = await trader.futures_close_short_market(position_size=size)

        if success:
            console.print(f"[green]‚úÖ –ü–æ–∑–∏—Ü–∏—è {choice} –∑–∞–∫—Ä—ã—Ç–∞![/green]")
        else:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {choice}[/red]")

        await asyncio.sleep(2)

    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π: {e}[/red]")
        await asyncio.sleep(2)

async def open_position(account: Account, side: str):
    coin = str(await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC):").execute_async())

    # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
    price = dict(await account.arkham_price.get_futures_price(coin))['price']
    if not price:
        console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {coin}[/red]")
        return

    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º % –æ—Ç –¥–µ–ø–æ
    percent = await inquirer.number(
        message="–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    ).execute_async()

    leverage_raw = (await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ –¥–ª—è –≤–∞—à–µ–π —Å–¥–µ–ª–∫–∏ (1 - 20):").execute_async())
    try:
        console.print('–ü–†–û–®–ï–õ')
        leverage = await ArkhamLeverage(account.session).check_leverage(coin.upper(), int(leverage_raw))
    except (TypeError, ValueError):
        console.print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–µ—á–æ... –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ - {config.DEFAULT_LEVERAGE}')
        leverage = config.DEFAULT_LEVERAGE

    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    size = PositionSizer(account.balance, int(leverage), float(price), float(percent)).calculate_size()
    console.print('CER')
    trader = ArkhamTrading(
        session=account.session,
        coin=coin,
        size=size,
        info_client=account.arkham_info
    )
    console.print('CExxx')

    if side == "long":
        success = await trader.futures_long_market()
    else:
        success = await trader.futures_short_market()

    if success:
        console.print(f"[green]‚úÖ {side.upper()} –ø–æ {coin} –æ—Ç–∫—Ä—ã—Ç[/green]")
    else:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏[/red]")

async def close_all_positions(account: Account):
    trader = ArkhamTrading(
        session=account.session,
        coin='LOLKEK',       # –í—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–∞–∫ –Ω—É–∂–Ω–æ!!!
        size='2 –±—É—Ç–µ—Ä–±—Ä–æ–¥–∞', # –í—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–∞–∫ –Ω—É–∂–Ω–æ!!!
        info_client=account.arkham_info)
    results = await trader.futures_close_position_market()
    if results:
        console.print(f"[green]‚úÖ –ó–∞–∫—Ä—ã—Ç—ã –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏: {list(results.keys())}[/green]")
    else:
        console.print("[yellow]‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π[/yellow]")
    await asyncio.sleep(2)
    

# --- –†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ –ë–î ---
async def clear_table_action():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    try:
        confirmation = await inquirer.select(
            message="‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Ç–∞–±–ª–∏—Ü—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
            choices=["‚ùå –ù–ï–¢, –æ—Ç–º–µ–Ω–∞", "‚úÖ –î–ê, –æ—á–∏—Å—Ç–∏—Ç—å"],
            default="‚ùå –ù–ï–¢, –æ—Ç–º–µ–Ω–∞"
        ).execute_async()
        
        if confirmation == "‚úÖ –î–ê, –æ—á–∏—Å—Ç–∏—Ç—å":
            trade_table = TradeSQL(db)
            await trade_table.clear_table(config.TABLE_NAME)
            console.print("[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞[/green]")
        else:
            console.print("[yellow]‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞[/yellow]")
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}[/red]")

async def delete_account_action(current_account: Account) -> str:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    
    Returns:
        "account_deleted" - –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
        "other_deleted" - –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç  
        "cancelled" - –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞
    """
    try:
        trade_table = TradeSQL(db)
        accounts = await trade_table.get_all(config.TABLE_NAME)
        
        if not accounts:
            console.print("[red]‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö[/red]")
            return "cancelled"
            
        account_names = [acc.get("account", "Unknown") for acc in accounts]
        
        selected_name = await inquirer.select(
            message="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            choices=account_names + ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ).execute_async()
        
        if selected_name == "‚ùå –û—Ç–º–µ–Ω–∞" or shutdown_event.is_set():
            return "cancelled"
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirmation = await inquirer.select(
            message=f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç '{selected_name}'? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
            choices=["‚ùå –ù–ï–¢, –æ—Ç–º–µ–Ω–∞", "‚úÖ –î–ê, —É–¥–∞–ª–∏—Ç—å"],
            default="‚ùå –ù–ï–¢, –æ—Ç–º–µ–Ω–∞"
        ).execute_async()
        
        if confirmation == "‚úÖ –î–ê, —É–¥–∞–ª–∏—Ç—å":
            success = await trade_table.delete_account(config.TABLE_NAME, selected_name)
            
            if success:
                console.print(f"[green]‚úÖ –ê–∫–∫–∞—É–Ω—Ç '{selected_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω[/green]")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                if selected_name == current_account.account:
                    return "account_deleted"
                else:
                    return "other_deleted"
            else:
                console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç '{selected_name}'[/red]")
                return "cancelled"
        else:
            console.print("[yellow]‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ[/yellow]")
            return "cancelled"
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}[/red]")
        return "cancelled"


async def show_all_accounts():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        trade_table = TradeSQL(db)
        accounts = await trade_table.get_all(config.TABLE_NAME)
        
        if not accounts:
            console.print("[red]‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö[/red]")
            return
            
        table = Table(title="üìã –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        table.add_column("–ê–∫–∫–∞—É–Ω—Ç", style="cyan")
        table.add_column("Email", style="green") 
        table.add_column("–ë–∞–ª–∞–Ω—Å", style="yellow")
        table.add_column("–û–±—ä–µ–º", style="blue")
        table.add_column("–û—á–∫–∏", style="magenta")
        
        for acc in accounts:
            table.add_row(
                str(acc.get("account", "N/A")),
                str(acc.get("email", "N/A")), 
                str(acc.get("balance", "N/A")),
                str(acc.get("volume", "N/A")),
                str(acc.get("points", "N/A"))
            )
            
        console.print(table)
        
        if not shutdown_event.is_set():
            await inquirer.text(message="–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").execute_async()
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}[/red]")

async def select_account() -> Optional[Account]:
    """–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        trade_table = TradeSQL(db)
        accounts = await trade_table.get_all(config.TABLE_NAME)

        if not accounts:
            console.print("[red]‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö[/red]")
            return None

        account_names = [acc.get("account", "Unknown") for acc in accounts]
        selected_name = await inquirer.select(
            message="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:",
            choices=account_names + ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ).execute_async()

        if selected_name == "‚ùå –û—Ç–º–µ–Ω–∞" or shutdown_event.is_set():
            return None

        acc_data = await trade_table.get_account(config.TABLE_NAME, selected_name)
        account = db_row_to_account(acc_data)

        await account.create_session()

        cookies_loaded = await apply_cookies_from_db(account.session, db, config.TABLE_NAME, account.account)
        
        if cookies_loaded:
            console.print("[green]‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î –≤ —Å–µ—Å—Å–∏—é[/green]")
            
            cookies_from_db = await trade_table.get_cookies(config.TABLE_NAME, account.account)
            if cookies_from_db:
                account.cookies = cookies_from_db
            
            cookies_valid = await check_cookies_from_account(account)
            
            if cookies_valid:
                console.print("[green]‚úÖ –ö—É–∫–∏ –≤–∞–ª–∏–¥–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞[/green]")
                await account.update_data()
                
                await trade_table.update_account_data(
                    config.TABLE_NAME,
                    account.account,
                    account.balance,
                    account.volume,
                    account.points,
                    account.margin_fee,
                    account.margin_bonus,
                    cookies=None  
                )
                return account
            else:
                console.print("[yellow]‚ö†Ô∏è –ö—É–∫–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã (—Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç), —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω[/yellow]")
        else:
            console.print("[yellow]‚ö†Ô∏è –ö—É–∫–∏ –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")

        console.print("[blue]üîê –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...[/blue]")
        account = await login_arkham(account)
        
        if not account or shutdown_event.is_set():
            console.print("[red]‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å[/red]")
            return None
            
        await account.update_data()
        
        await save_cookies_to_account(account.session, account)
        await trade_table.update_account_data(
            config.TABLE_NAME,
            account.account,
            account.balance,
            account.volume,
            account.points,
            account.margin_fee,
            account.margin_bonus,
            account.cookies
        ) 

        return account

    except Exception as e:
        if not shutdown_event.is_set():
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}[/red]")
        return None


async def add_account() -> Optional[Account]:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        account_name = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:").execute_async()
        email = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ email:").execute_async()
        password = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:").execute_async()
        raw_proxy = await inquirer.text(
            message="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: http://user:pass ip:port –∏–ª–∏ http://user:pass@ip:port):"
        ).execute_async()
        proxy = _normalize_proxy(str(raw_proxy))
        api_key = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ Arkham api_key:").execute_async()
        api_secret = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ Arkham api_secret:").execute_async()
        captcha_key = await inquirer.text(message="–í–≤–µ–¥–∏—Ç–µ TwoCaptcha captcha_key:").execute_async()
        
        account = Account(
            account=account_name,
            email=email,
            password=password,
            proxy=proxy or None,
            api_key=api_key,
            api_secret=api_secret,
            captcha_key=captcha_key
        )

        await account.create_session()
        
        if shutdown_event.is_set():
            await account.close_session()
            return None

        status = await account.session_check(db)
        if not status and not shutdown_event.is_set():
            choice = await inquirer.select(
                message="–ü—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏?",
                choices=["‚òëÔ∏è –î–∞", "‚ùå –í—ã—Ö–æ–¥"],
                default="‚òëÔ∏è –î–∞",
            ).execute_async()

            if shutdown_event.is_set():
                await account.close_session()
                return None

            match choice:
                case "‚òëÔ∏è –î–∞":
                    account = await login_arkham(account)
                    if not account or shutdown_event.is_set():
                        console.print("[red]‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å[/red]")
                        return None 
                case "‚ùå –í—ã—Ö–æ–¥":
                    await account.close_session()
                    return None
        
        if shutdown_event.is_set():
            await account.close_session()
            return None
                
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        await account.initialize_clients()
        
        if shutdown_event.is_set():
            await account.close_session()
            return None
        
        balance = float(await account.arkham_info.get_balance())
        points = int(await account.arkham_info.get_volume_or_points('points'))
        volume = float(await account.arkham_info.get_volume_or_points('volume'))
        margin_bonus, margin_fee = await account.arkham_info.get_fee_margin()

        if shutdown_event.is_set():
            await account.close_session()
            return None
        
        await save_account_to_db(account, points, volume, balance, margin_fee, margin_bonus)
        
        return account
        
    except Exception as e:
        if not shutdown_event.is_set():
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}[/red]")
        return None


async def save_account_to_db(
        account: Account,
        points: Optional[int] | None = None,
        volume: Optional[float] | None = None,
        balance: Optional[float] | None = None,
        margin_fee: Optional[float] | None = None,
        margin_bonus: Optional[float] | None = None
    ):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if shutdown_event.is_set():
        return
        
    try:
        trade_table = TradeSQL(db)
        account_data = account.model_dump(
            exclude={"arkham_info", "arkham_login", "arkam_price", "arkham_trader", "session", "_session_manager"}
        )
        
        if account_data.get('cookies'):
            if isinstance(account_data['cookies'], (dict, list, tuple)):
                account_data['cookies'] = json.dumps(account_data['cookies'])
            elif not isinstance(account_data['cookies'], str):
                account_data['cookies'] = str(account_data['cookies'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        account_data.update({
            "balance": balance,
            "points": points,
            "volume": volume,
            "margin_fee": margin_fee,
            "margin_bonus": margin_bonus,
        })
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        for key, value in account_data.items():
            if isinstance(value, (tuple, list)) and key != 'cookies':
                account_data[key] = json.dumps(value)
            elif value is None:
                account_data[key] = None
            elif not isinstance(value, (str, int, float, bytes)):
                account_data[key] = str(value)
        
        await trade_table.add_info(config.TABLE_NAME, account_data)
        console.print(f"[green]‚úÖ –ê–∫–∫–∞—É–Ω—Ç '{account.account}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É[/green]")
        
    except Exception as e:
        if not shutdown_event.is_set():
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ë–î: {e}[/red]")


async def login_arkham(account: Account) -> Optional[Account]:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Arkham"""
    try:
        session = await account.ensure_session()

        captcha = TwoCaptcha(session, account.captcha_key)
        token = await captcha.solve_turnstile()

        arkham_login = ArkhamLogin(
            session=session,
            password=account.password,
            email=account.email,
            turnstile_token=token,
        )

        status = await arkham_login.login_arkham()
        if not status or shutdown_event.is_set():
            console.print("[red]‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Arkham[/red]")
            return None

        code_2fa = await arkham_login.input_2fa()
        if shutdown_event.is_set():
            return None
            
        ok = await arkham_login.verify_2FA(code_2fa)
        if not ok or shutdown_event.is_set():
            console.print("[red]‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA[/red]")
            return None

        updated_account = await save_cookies_to_account(session, account)
        console.print("[green]‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω, –∫—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Account[/green]")

        return updated_account

    except Exception as e:
        if not shutdown_event.is_set():
            import traceback
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ login: {repr(e)}[/red]")
            console.print(traceback.format_exc())
        return None


    
async def create_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        trade_table = TradeSQL(db)
        await trade_table.create_table(config.TABLE_NAME)
        console.print("[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞[/green]")
    except Exception as e:
        if not shutdown_event.is_set():
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}[/red]")

# --- Main ---
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global db 
    try:
        setup_interrupt_handler()
        
        console.print(Panel.fit(
            "[bold blue]üöÄ ARKHAM TRADING SYSTEM[/bold blue]\n"
            "[yellow]–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è[/yellow]",
            title="–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
        ))

        db = AsyncDatabaseManager(config.DB_NAME)

        await create_table()
        
        if shutdown_event.is_set():
            return

        # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        account = await start_menu()
        if not account or shutdown_event.is_set():
            console.print("[yellow]‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞[/yellow]")
            return

        console.print(f"[green]‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: {account.account}[/green]")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await main_menu(account)

    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if not _shutdown_in_progress:
            await graceful_shutdown()


if __name__ == "__main__":
    try:
        if hasattr(asyncio, 'WindowsProactorEventLoopPolicy') and os.name == 'nt':
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            loop.run_until_complete(main())
        finally:
            pending = asyncio.all_tasks(loop)
            if pending:
                for task in pending:
                    task.cancel()
                
                try:
                    loop.run_until_complete(
                        asyncio.wait_for(
                            asyncio.gather(*pending, return_exceptions=True),
                            timeout=2.0
                        )
                    )
                except asyncio.TimeoutError:
                    pass
            
            loop.close()
            
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)