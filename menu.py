import asyncio
from InquirerPy import inquirer
from colorama import Fore, init
from rich.console import Console
from rich.table import Table

from data import config
from db.manager import AsyncDatabaseManager
from db.tradeDB import TradeSQL

init(autoreset=True)
console = Console()

db = AsyncDatabaseManager(config.DB_NAME)

async def main_menu():
    while True:
        choice = await inquirer.select(
            message="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            choices=[
                "üìÇ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –î–ë –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É",
                "üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                "üíπ –¢–æ—Ä–≥–æ–≤–ª—è –≤—Ä—É—á–Ω—É—é",
                "ü§ñ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                "‚ùå –í—ã—Ö–æ–¥",
            ],
            default="üìÇ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –î–ë –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É",
        ).execute_async()

        match choice:
            case "üìÇ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –î–ë –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É":
                trade_table = TradeSQL(db)
                await trade_table.create_table(config.TABLE_NAME)
                print(Fore.MAGENTA + "–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")

            case "üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤":
                await get_all_acc()

            case "üíπ –¢–æ—Ä–≥–æ–≤–ª—è –≤—Ä—É—á–Ω—É—é":
                await manual_trading_menu()

            case "ü§ñ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏":
                print(Fore.BLUE + "–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
                await run_strategy(db)

            case "‚ùå –í—ã—Ö–æ–¥":
                print(Fore.RED + "–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                break


async def manual_trading_menu():
    """–ü–æ–¥–º–µ–Ω—é —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    while True:
        sub_choice = await inquirer.select(
            message="–†—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            choices=[
                "‚ûï –í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π",
                "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            ],
        ).execute_async()

        match sub_choice:
            case "‚ûï –í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π":
                count = await inquirer.text(
                    message="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:"
                ).execute_async()
                try:
                    count = int(count)
                    print(Fore.GREEN + f"–í—ã –≤–≤–µ–ª–∏ {count} –ø–æ–∑–∏—Ü–∏–π.")
                except ValueError:
                    print(Fore.RED + "–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!")

            case "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                print(Fore.YELLOW + "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
                break

async def get_all_acc():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        trade_table = TradeSQL(db)
        data = await trade_table.get_all(config.TABLE_NAME)
        
        if not data:
            print(Fore.YELLOW + "üì≠ –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        table = Table(title="[bold blue]üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö[/bold blue]")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        table.add_column("Account", style="magenta", no_wrap=True)
        table.add_column("Balance", justify="right", style="green")
        table.add_column("Points", justify="right", style="cyan")
        table.add_column("Volume", justify="right", style="yellow")
        table.add_column("Margin Fee", justify="right", style="red")
        
        for row in data:
            if isinstance(row, dict):
                table.add_row(
                    str(row.get('account', 'N/A')),
                    str(row.get('balance', 'N/A')),
                    str(row.get('points', 'N/A')),
                    str(row.get('volume', 'N/A')),
                    str(row.get('margin_fee', 'N/A'))
                )
            else:
                table.add_row(*[str(item) for item in row])
        
        console.print(table)
        print(Fore.GREEN + f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(data)}")
        
    except Exception as e:
        print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")

async def run_strategy(db: AsyncDatabaseManager):
    print(Fore.YELLOW + "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è-–∑–∞–≥–ª—É—à–∫–∞.")
    await asyncio.sleep(1)
    print(Fore.GREEN + "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# if __name__ == "__main__":
#     asyncio.run(main_menu())


# import asyncio
# from db.manager import AsyncDatabaseManager
# from db.tradeDB import TradeSQL

# async def main():
#     db = AsyncDatabaseManager("trade.db")
#     trade = TradeSQL(db)
#     await trade.c("accounts")

#     await trade.clear_table("accounts")

# asyncio.run(main())
