from loguru import logger
import aiohttp
import json
import asyncio
from yarl import URL
import time
import os

from data import config
from utils.session import AsyncSession, check_ip
from utils.captcha import TwoCaptcha

from src.account.info import ArkhamInfo
from src.trade.trading_client import ArkhamTrading 
from utils.leverage import ArkhamLeverage
from utils.size_calc import PositionSizer
from utils.get_prices import ArkhamPrices
from utils.cookies import check_cookies_file, apply_cookies, get_cookies_json

class ArkhamLogin:
    def __init__(self,
                session: aiohttp.ClientSession,
                turnstile_token: str | None = None):
        self.session = session
        self.token = turnstile_token

    @staticmethod
    async def input_2fa():
        msg = " üîë –í–≤–µ–¥–∏—Ç–µ 2FA –∫–æ–¥: "
        border = "=" * 33  # —à–∏—Ä–∏–Ω–∞ —Ä–∞–º–∫–∏
        print("\n" + border)
        print("|" + msg.ljust(len(border) - 2) + "|")
        print(border)
        code = input("> ").strip()
        return code
        
    async def headers(self, action: str | None = None):
        if action == 'login':
            return {
                'content-type': 'application/json',
                'origin': 'https://arkm.com',
                'referer': config.PAGE_URL,
            }
        return {
            "content-type": "application/json",
            "origin": "https://arkm.com",
            "referer": "https://arkm.com/login?redirectPath=%2F"
        }
    
    async def json_data(self, action: str | None = None, code_2fa: str | None = None):
        if action == 'login':
            return {
                'email': config.LOGIN_EMAIL,
                'password': config.LOGIN_PASSWORD,
                'callbackDomain': '',
                'redirectPath': '/',
                'turnstile': self.token,  
                'invisibleTurnstile': '',
            }
        return  {
            'callbackDomain': '',
            'redirectPath': '/',
            'code': code_2fa,
        }
            
    async def login_arkham(self):
        async with self.session.get(config.PAGE_URL) as resp:
            logger.info(f"–ó–∞–≥—Ä—É–∑–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞: {resp.status}")
        async with self.session.post('https://arkm.com/api/auth/login', 
                          headers=await self.headers(action='login'), 
                          json=await self.json_data(action='login')) as resp:
            response_text = await resp.text()
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status}")
            logger.info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text}")
            
            if resp.status == 200:
                try:
                    result = json.loads(response_text)
                    if 'message' in result:
                        if result['message'] == 'no turnstile':
                            logger.error("–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∏–Ω—è–ª —Ç–æ–∫–µ–Ω Turnstile")
                            return False
                        elif 'error' in result['message'].lower():
                            logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {result['message']}")
                            return False
                    
                    logger.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
                    return True
                    
                except json.JSONDecodeError:
                    logger.info("–û—Ç–≤–µ—Ç –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω")
                    return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ HTTP: {resp.status}")
                return False
    
    async def verify_2FA(self, code_2fa: str) -> bool:
        while True:
            async with self.session.post(
                'https://arkm.com/api/auth/login/challenge',
                headers=await self.headers(),
                json=await self.json_data(code_2fa=code_2fa)
            ) as resp:
                logger.info(f"–°—Ç–∞—Ç—É—Å 2FA: {resp.status} ")

                if resp.status == 200:
                    logger.success("‚úÖ 2FA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –≤—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω")
                    return True
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA")
                    return False
                
 



async def main():
    async with aiohttp.ClientSession() as session:
        if check_cookies_file():
            await apply_cookies(session)
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∫—É–∫–∏ –≤ —Å–µ—Å—Å–∏—é")
            ins = ArkhamInfo(session)
            balance = await ins.get_balance()
            print(f"–ë–∞–ª–∞–Ω—Å: {balance}")
        else:
            print("‚ö†Ô∏è –ö—É–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ ‚Üí –ª–æ–≥–∏–Ω–∏–º—Å—è –∑–∞–Ω–æ–≤–æ")
            solver = TwoCaptcha(session)
            token = await solver.solve_turnstile()

            arkham = ArkhamLogin(session, token)
            await arkham.login_arkham()
            two_fa_code = arkham.input_2fa()
            verified = await arkham.verify_2FA(two_fa_code)
            cookies_dict  = await arkham.get_cookies_json()
            with open(config.COOKIE_FILE, "w", encoding="utf-8") as f:
                json.dump(cookies_dict, f, indent=2, ensure_ascii=False)

    # —Å–æ–∑–¥–∞—ë–º aiohttp-—Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    # async with AsyncSession() as session:
    #     ip = await check_ip(session=session)
    #     # —Ä–µ—à–∞–µ–º –∫–∞–ø—á—É
    #     solver = TwoCaptcha(session)
    #     token = await solver.solve_turnstile()

    #     if not token:
    #         logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Turnstile")
    #         return

    #     # –ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ –≤ Arkham
    #     arkham = ArkhamLogin(session, turnstile_token=token)
    #     success = await arkham.login_arkham()

    #     if success:
    #         logger.success("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫—É–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:")
    #         if config.ENABLE_2FA:
    #             two_fa_code = input_2fa()
    #             verified = await arkham.verify_2FA(two_fa_code)
    #             cookies_dict  = await arkham.get_cookies_json()
    #             with open(config.COOKIE_FILE, "w", encoding="utf-8") as f:
    #                 json.dump(cookies_dict, f, indent=2, ensure_ascii=False)

            #     ins = ArkhamInfo(session)

            #     balance = await ins.get_balance()
            #     point = await ins.get_volume_or_points(action='points')
            #     volume = await ins.get_volume_or_points(action='volume')
            #     fee_margin, fee_credit = await ins.get_fee_margin()
            #     logger.success(f"""
            #                     –ë–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏: {point}, –¢–æ—Ä–≥–æ–≤—ã–π –æ–±—ä—ë–º: {volume} 
            #                     –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—Ä–≥–æ–≤—ã–π –æ–±—ä—ë–º: {fee_margin}, –ö—Ä–µ–¥–∏—Ç –∑–∞ –∫–æ–º–∏—Å—Å–∏–∏: {fee_credit}
            #                     –ë–∞–ª–∞–Ω—Å: {balance}""")
            #     arkham = ArkhamLeverage(session)
            #     leverage = "3"
            #     await arkham.set_leverage('BTC', leverage)
            #     await arkham.check_leverage('BTC')

            #     price_client = ArkhamPrices(
            #         api_key=config.ARKHAM_API_KEY,
            #         api_secret=config.ARKHAM_API_SECRET,
            #         session=session
            #     ) 
            #     data = await price_client.get_futures_price('BTC')
            #     price = data.get('mark_price')

            #     size = PositionSizer(
            #         balance=float(balance),
            #         leverage=int(leverage),
            #         price=float(price),
            #         risk_pct=40
            #     ).calculate_size()

            #     trader = ArkhamTrading(
            #         session=session,
            #         coin='BTC',
            #         size=size,
            #         price=price,
            #         info_client=ins
            #     )
            #     # order = await trader.futures_long_limit()
            # # await asyncio.sleep(5)  # –∂–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
            #     size = (await ins.get_all_positions()).get('BTC')['base']
            #     await asyncio.sleep(2)  
            #     cancel = await trader.futures_close_position_market()
        #     else:
        #         logger.info("2FA –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

        # else:
        #     logger.error("‚ùå –í—Ö–æ–¥ –≤ Arkham –Ω–µ —É–¥–∞–ª—Å—è")


if __name__ == "__main__":
    asyncio.run(main())


