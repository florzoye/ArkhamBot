import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from loguru import logger

from db.manager import AsyncDatabaseManager
from db.tradeDB import TradeSQL
from src.account.login import ArkhamLogin
from src.account.info import ArkhamInfo
from utils.session import AsyncSession, check_ip
from utils.captcha import TwoCaptcha
from utils.cookies import save_cookies_to_db, apply_cookies_from_db


TOKEN = '7621167911:AAGrlI2YGTF6LRsuzypGrSyvGoGz03ToPMg'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger.add("logs/bot_{time}.log", rotation="1 day", retention="7 days")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = AsyncDatabaseManager("trade.db")
trade_table = TradeSQL(db)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AddAccountState(StatesGroup):
    waiting_for_name = State()
    waiting_for_email = State()
    waiting_for_password = State()
    waiting_for_proxy = State()
    waiting_for_api_key = State()  
    waiting_for_api_secret = State()  
    waiting_for_2fa = State()

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from aiogram import BaseMiddleware
from typing import Callable, Dict, Any, Awaitable

class LoggingMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        if hasattr(event, 'from_user') and event.from_user:
            user_id = event.from_user.id
            username = event.from_user.username or "N/A"
            logger.info(f"Event from user {user_id} (@{username})")
        
        try:
            return await handler(event, data)
        except Exception as e:
            logger.error(f"Error in handler: {e}")
            raise

# Rate limiting middleware
import time
from collections import defaultdict

class RateLimitMiddleware(BaseMiddleware):
    def __init__(self, rate_limit: int = 1):
        self.rate_limit = rate_limit
        self.storage = defaultdict(list)
    
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        if hasattr(event, 'from_user') and event.from_user:
            user_id = event.from_user.id
            current_time = time.time()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            self.storage[user_id] = [
                timestamp for timestamp in self.storage[user_id]
                if current_time - timestamp < 60  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
            ]
            
            if len(self.storage[user_id]) >= self.rate_limit:
                logger.warning(f"Rate limit exceeded for user {user_id}")
                if hasattr(event, 'answer'):
                    await event.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
                return
            
            self.storage[user_id].append(current_time)
        
        return await handler(event, data)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)
async def main_menu(user_id: int):
    accounts = await trade_table.get_accounts_by_user("accounts", user_id)
    
    buttons = [
        [InlineKeyboardButton(text="üìä –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
        [InlineKeyboardButton(text="‚ûï –û—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="open_menu")],
    ]
    
    if accounts:
        buttons.append([InlineKeyboardButton(text="üìÇ –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="my_accounts")])
    
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_account")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.callback_query(lambda c: c.data == "add_account")
async def start_add_account(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddAccountState.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–û—Å–Ω–æ–≤–Ω–æ–π</b>):")
    await callback.answer()

@dp.message(AddAccountState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    account_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    existing = await trade_table.get_account("accounts", account_name)
    if existing:
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ:")
        return
    
    await state.update_data(account_name=account_name)
    await state.set_state(AddAccountState.waiting_for_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>email</b> –æ—Ç Arkham –∞–∫–∫–∞—É–Ω—Ç–∞:")
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

@dp.message(AddAccountState.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if "@" not in email or "." not in email:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:")
        return
    
    await state.update_data(email=email)
    await state.set_state(AddAccountState.waiting_for_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b> –æ—Ç Arkham –∞–∫–∫–∞—É–Ω—Ç–∞:")
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

@dp.message(AddAccountState.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    
    if len(password) < 6:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å:")
        return
    
    await state.update_data(password=password)
    await state.set_state(AddAccountState.waiting_for_proxy)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–æ–∫—Å–∏</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>http://login:pass@ip:port</code>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>-</b> –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω—É–∂–µ–Ω:"
    )
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

@dp.message(AddAccountState.waiting_for_proxy)
async def process_proxy(message: types.Message, state: FSMContext):
    proxy_text = message.text.strip()
    proxy = None if proxy_text == "-" else proxy_text
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
    if proxy and not any(proxy.startswith(proto) for proto in ["http://", "https://", "socks4://", "socks5://"]):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: http://login:pass@ip:port")
        return
    
    await state.update_data(proxy=proxy)
    await state.set_state(AddAccountState.waiting_for_api_key)  # ‚Üê –ü–µ—Ä–µ—Ö–æ–¥ –∫ API –∫–ª—é—á—É
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>API Key</b> –æ—Ç Arkham:\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>-</b> –µ—Å–ª–∏ API –∫–ª—é—á –Ω–µ –Ω—É–∂–µ–Ω:"
    )
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

@dp.message(AddAccountState.waiting_for_api_key)
async def process_api_key(message: types.Message, state: FSMContext):
    api_key = message.text.strip()
    api_key = None if api_key == "-" else api_key
    
    await state.update_data(api_key=api_key)
    await state.set_state(AddAccountState.waiting_for_api_secret)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>API Secret</b> –æ—Ç Arkham:\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>-</b> –µ—Å–ª–∏ API —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω:"
    )
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

@dp.message(AddAccountState.waiting_for_api_secret)
async def process_api_secret(message: types.Message, state: FSMContext):
    api_secret = message.text.strip()
    api_secret = None if api_secret == "-" else api_secret
    
    await state.update_data(api_secret=api_secret)
    
    status_message = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç Arkham...")
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–∏–Ω–∞
    await process_arkham_login_fixed(message, state, status_message)

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–∏–Ω–∞
async def process_arkham_login_fixed(message: types.Message, state: FSMContext, status_message: types.Message):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Arkham"""
    try:
        data = await state.get_data()
        user_id = message.from_user.id
        
        async with AsyncSession(proxy=data['proxy']) as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await status_message.edit_text("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            try:
                await check_ip(session)
            except Exception as e:
                await status_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∫—Å–∏",
                    reply_markup=await main_menu(user_id)
                )
                await state.clear()
                return
            
            # –†–µ—à–∞–µ–º –∫–∞–ø—á—É
            await status_message.edit_text("ü§ñ –†–µ—à–∞–µ–º –∫–∞–ø—á—É...")
            solver = TwoCaptcha(session)
            try:
                token = await asyncio.wait_for(solver.solve_turnstile(), timeout=120)
            except asyncio.TimeoutError:
                await status_message.edit_text(
                    "‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=await main_menu(user_id)
                )
                await state.clear()
                return
            except Exception as e:
                await status_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á 2captcha.",
                    reply_markup=await main_menu(user_id)
                )
                await state.clear()
                return
            
            if not token:
                await status_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∫–∞–ø—á–∏.",
                    reply_markup=await main_menu(user_id)
                )
                await state.clear()
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
            await status_message.edit_text("üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...")
            arkham = ArkhamLogin(session, data["password"], data['email'], token)
            
            try:
                success = await arkham.login_arkham()
                
                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                    cookies_dict = {}
                    for cookie in session.cookie_jar:
                        cookies_dict[cookie.key] = cookie.value
                    
                    await state.update_data(session_cookies=cookies_dict)
                    
                    await status_message.edit_text("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ 2FA:")
                    await state.set_state(AddAccountState.waiting_for_2fa)
                else:
                    await status_message.edit_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞.",
                        reply_markup=await main_menu(user_id)
                    )
                    await state.clear()
                    
            except Exception as e:
                logger.error(f"Login error: {e}")
                await status_message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=await main_menu(user_id)
                )
                await state.clear()

    except Exception as e:
        logger.error(f"Critical error in process_arkham_login: {e}")
        await status_message.edit_text(
            "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=await main_menu(user_id)
        )
        await state.clear()

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ 2FA
@dp.message(AddAccountState.waiting_for_2fa)
async def process_2fa_fixed(message: types.Message, state: FSMContext):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 2FA –∫–æ–¥–∞"""
    try:
        data = await state.get_data()
        user_id = message.from_user.id
        two_fa_code = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
        if not two_fa_code.isdigit() or len(two_fa_code) != 6:
            await message.answer("‚ùå 2FA –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            return
        
        status_message = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º 2FA –∫–æ–¥...")
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        async with AsyncSession(proxy=data['proxy']) as session:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ cookies
            saved_cookies = data.get('session_cookies', {})
            session.cookie_jar.update_cookies(saved_cookies)

            arkham = ArkhamLogin(session, data['password'], data['email'])
            
            verified = await arkham.verify_2FA(two_fa_code)
            
            if verified:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                await complete_account_setup(status_message, session, data, user_id)
            else:
                await status_message.edit_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π 2FA –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=await main_menu(user_id)
                )
                
    except Exception as e:
        logger.error(f"2FA processing error: {e}")
        await status_message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ 2FA: {str(e)}",
            reply_markup=await main_menu(user_id)
        )
        
    await state.clear()

async def complete_account_setup(status_message, session, data, user_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        await status_message.edit_text("‚úÖ 2FA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
        cookies_dict = await save_cookies_to_db(session, db, "accounts", data['account_name'])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        info_client = ArkhamInfo(session)
        balance = await info_client.get_balance()
        points = await info_client.get_volume_or_points('points')
        volume = await info_client.get_volume_or_points('volume')
        margin_fee, _ = await info_client.get_fee_margin()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–¥–æ–±–∞–≤–ª–µ–Ω—ã api_key –∏ api_secret –∏–∑ state)
        account_info = {
            "account": data['account_name'],
            "balance": balance or 0.0,
            "points": int(points) if points else 0,
            "volume": volume or 0.0,
            "margin_fee": margin_fee or 0.0,
            "user_id": user_id,
            "email": data['email'],
            "password": data['password'],
            "api_key": data.get('api_key', ""),  # ‚Üê –ë–µ—Ä–µ–º –∏–∑ state
            "api_secret": data.get('api_secret', ""),  # ‚Üê –ë–µ—Ä–µ–º –∏–∑ state
            "cookies": json.dumps(cookies_dict) if cookies_dict else "",
            "proxy": data.get('proxy', "")
        }
        
        await trade_table.add_info("accounts", account_info)
        
        await status_message.edit_text(
            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <b>{data['account_name']}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance or 0} USDT\n"
            f"‚≠ê –ü–æ–∏–Ω—Ç—ã: {points or 0}\n"
            f"üìä –û–±—ä—ë–º: {volume or 0} USDT",
            reply_markup=await main_menu(user_id)
        )
        
    except Exception as e:
        logger.error(f"Account setup error: {e}")
        await status_message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=await main_menu(user_id)
        )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(lambda c: c.data == "my_accounts")
async def my_accounts(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    accounts = await trade_table.get_accounts_by_user("accounts", user_id)

    if not accounts:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", 
            reply_markup=await main_menu(user_id)
        )
        return

    text = "üìÇ –í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n"
    kb = []
    
    for acc in accounts:
        cookies_valid = await trade_table.check_cookies_valid("accounts", acc['account'])
        status = "üü¢" if cookies_valid else "üî¥"
        
        text += (
            f"{status} <b>{acc['account']}</b>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {acc['balance']} USDT\n"
            f"‚≠ê –ü–æ–∏–Ω—Ç—ã: {acc['points']}\n"
            f"üìä –û–±—ä—ë–º: {acc['volume']} USDT\n\n"
        )
        
        kb.append([InlineKeyboardButton(
            text=f"üîÑ {acc['account']} - –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=f"update_acc:{acc['account']}"
        )])
        kb.append([InlineKeyboardButton(
            text=f"üóëÔ∏è {acc['account']} - –£–¥–∞–ª–∏—Ç—å", 
            callback_data=f"delete_acc:{acc['account']}"
        )])

    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@dp.callback_query(lambda c: c.data.startswith("update_acc:"))
async def update_account_data(callback: types.CallbackQuery):
    account_name = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        account = await trade_table.get_account("accounts", account_name)
        if not account:
            await callback.message.edit_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=await main_menu(user_id)
            )
            return
            
        if not await trade_table.check_cookies_valid("accounts", account_name):
            await callback.message.edit_text(
                f"‚ùå –°–µ—Å—Å–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ <b>{account_name}</b> –∏—Å—Ç–µ–∫–ª–∞.\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.",
                reply_markup=await main_menu(user_id)
            )
            return
        
        proxy = account.get('proxy') if account.get('proxy') != '-' else None
        
        async with AsyncSession(proxy) as session:
            success = await apply_cookies_from_db(session, db, "accounts", account_name)
            if not success:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è <b>{account_name}</b>",
                    reply_markup=await main_menu(user_id)
                )
                return
            
            info_client = ArkhamInfo(session)
            balance = await info_client.get_balance()
            points = await info_client.get_volume_or_points('points')
            volume = await info_client.get_volume_or_points('volume')
            margin_fee, _ = await info_client.get_fee_margin()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ api_key –∏ api_secret)
            updated_info = {
                "account": account_name,
                "balance": balance or 0.0,
                "points": int(points) if points else 0,
                "volume": volume or 0.0,
                "margin_fee": margin_fee or 0.0,
                "user_id": user_id,
                "email": account.get('email', ''),
                "password": account.get('password', ''),
                "api_key": account.get('api_key', ''),  # ‚Üê –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
                "api_secret": account.get('api_secret', ''),  # ‚Üê –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
                "cookies": account.get('cookies', ''),
                "proxy": account.get('proxy', '')
            }
            
            await trade_table.add_info("accounts", updated_info)
            
            await callback.message.edit_text(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ <b>{account_name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance or 0} USDT\n"
                f"‚≠ê –ü–æ–∏–Ω—Ç—ã: {points or 0}\n"
                f"üìä –û–±—ä—ë–º: {volume or 0} USDT\n"
                f"üí∏ –ú–∞—Ä–∂–∏–Ω –±–æ–Ω—É—Å: {margin_fee or 0} USDT",
                reply_markup=await main_menu(user_id)
            )
            
    except Exception as e:
        logger.error(f"Update account error: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            reply_markup=await main_menu(user_id)
        )

@dp.callback_query(lambda c: c.data.startswith("delete_acc:"))
async def confirm_delete_account(callback: types.CallbackQuery):
    account_name = callback.data.split(":", 1)[1]
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{account_name}"),
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="my_accounts")
        ]
    ])
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç <b>{account_name}</b>?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=kb
    )

@dp.callback_query(lambda c: c.data.startswith("confirm_delete:"))
async def delete_account(callback: types.CallbackQuery):
    account_name = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    
    try:
        await db.execute(
            "DELETE FROM accounts WHERE account = :account AND user_id = :user_id",
            {"account": account_name, "user_id": user_id}
        )
        
        await callback.message.edit_text(
            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <b>{account_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=await main_menu(user_id)
        )
        
    except Exception as e:
        logger.error(f"Delete account error: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=await main_menu(user_id)
        )

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await main_menu(callback.from_user.id)
    )

@dp.callback_query(lambda c: c.data in ["positions", "open_menu"])
async def placeholder_handlers(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=await main_menu(callback.from_user.id)
    )
    await callback.answer()

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! ü§ñ\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Arkham.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await main_menu(message.from_user.id)
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
ü§ñ <b>Arkham Trading Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ ‚ûï –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π  
‚Ä¢ üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
‚Ä¢ üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –±—ç–∫–∞–ø—ã
"""
    await message.answer(help_text, reply_markup=await main_menu(message.from_user.id))

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    accounts = await trade_table.get_accounts_by_user("accounts", user_id)
    
    total_balance = sum(float(acc.get('balance', 0)) for acc in accounts)
    total_points = sum(int(acc.get('points', 0)) for acc in accounts)
    total_volume = sum(float(acc.get('volume', 0)) for acc in accounts)
    
    stats_text = f"""
üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üë§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f} USDT
‚≠ê –û–±—â–∏–µ –ø–æ–∏–Ω—Ç—ã: {total_points:,}
üìä –û–±—â–∏–π –æ–±—ä—ë–º: {total_volume:.2f} USDT
"""
    
    await message.answer(stats_text, reply_markup=await main_menu(user_id))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
async def on_startup():
    await trade_table.create_table("accounts")
    logger.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def on_shutdown():
    await db.close()
    await bot.session.close()
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.message.middleware(LoggingMiddleware())
    dp.callback_query.middleware(LoggingMiddleware())
    dp.message.middleware(RateLimitMiddleware(rate_limit=10))  # 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await on_startup()
    
    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.set_my_commands([
        types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        types.BotCommand(command="stats", description="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    ])
    
    logger.success("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
