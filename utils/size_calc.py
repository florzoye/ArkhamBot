import asyncio
from data.config import Leverage
import math

class PositionSizer:
    def __init__(self, balance: float, leverage: int | Leverage, price: float, risk_pct: float):
        # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Enum –∏ int
        if isinstance(leverage, Leverage):
            leverage = leverage.value

        if not (1 <= int(leverage) <= 25):
            raise ValueError("–ü–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 25")
        if not (0 < risk_pct <= 100):
            raise ValueError("risk_pct –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0‚Äì100")

        self.balance = balance
        self.leverage = leverage
        self.price = price
        self.risk_pct = risk_pct
        self.step = 0.00001

    def calculate_size(self) -> float:
        """–†–∞—Å—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ % –æ—Ç –¥–µ–ø–æ, —Å —É—á—ë—Ç–æ–º –ø–ª–µ—á–∞)"""
        capital_to_use = self.balance * (self.risk_pct / 100)
        capital_with_leverage = capital_to_use * self.leverage
        size = capital_with_leverage / self.price
        size = math.floor(size / self.step) * self.step
        return round(size, 5)
# üîπ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

async def main():
    sizer = PositionSizer(balance=98, leverage=25)
    size = await sizer.calculate_size()
    print(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {size} BTC")

if __name__ == "__main__":
    asyncio.run(main())



